# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: 'ubuntu-18.04'

parameters:
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply. Use only buildNumber or skip for manual deployment"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: skip
  - name: TEST
    displayName: Run tests
    type: boolean
    default: false

variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    dockerRegistryServiceConnection: $(DEV_CONTAINER_REGISTRY_SERVICE_CONN)
    kubernetesServiceConnection: '$(DEV_KUBERNETES_SERVICE_CONN)'
  ${{ if eq(parameters['ENV'], 'uat') }}:
    dockerRegistryServiceConnection: $(UAT_CONTAINER_REGISTRY_SERVICE_CONN)
    kubernetesServiceConnection: '$(UAT_KUBERNETES_SERVICE_CONN)'
  ${{ if eq(parameters['ENV'], 'prod') }}:
    dockerRegistryServiceConnection: $(PROD_CONTAINER_REGISTRY_SERVICE_CONN)
    kubernetesServiceConnection: '$(PROD_KUBERNETES_SERVICE_CONN)'
  ${{ if eq(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: "main" # force to main branch
  ${{ if ne(variables['Build.SourceBranchName'], 'merge') }}:
    SOURCE_BRANCH: ${{ variables['Build.SourceBranchName'] }}

  # general variables
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""

  # Image Repository Name
  imageRepository: '$(IMAGE_REPOSITORY_NAME)'
  nameSpace : '$(K8S_NAMESPACE)'

stages:

  # Create a release on GitHub
  - stage: release_service
    condition: ne('${{ parameters.SEMVER }}', 'skip')
    jobs:
      - job: releaseService
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              git checkout $(SOURCE_BRANCH)

          - script: |
              git config --global user.name "$(GIT_USERNAME)"
              git config --global user.email "$(GIT_EMAIL)"

          - template: azure-templates/maven-versioning.yml
            parameters:
              semver: "${{ parameters.SEMVER }}"

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - script: |
              git add pom.xml
              git commit -m "Bump version [skip ci]"
              git push origin $(SOURCE_BRANCH)


          - script: |
              HEAD_SHA=$(git rev-parse HEAD)
              TAG="$(pomversion.next)"
              TITLE="Release $(pomversion.next)"
              echo "##vso[task.setvariable variable=title]$TITLE"
              echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
              echo "##vso[task.setvariable variable=tag]$TAG"

          - script: |
              echo $(tag)
              echo $(title)
              echo $(sha)


          # create new release
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: $(GITHUB_CONNECTION)
              repositoryName: $(Build.Repository.Name)
              action: create
              target: $(sha)
              tagSource: manual
              tag: $(tag)
              title: $(title)
              addChangelog: true

  # Deploy on Azure ACR
  - stage: 'Build'
    displayName: 'Build_and_Publish_to_${{ parameters.ENV }}'
    condition: not(failed('releaseService'))
    jobs:
      - job: deployJava
        steps:
          - task: Bash@3
            displayName: Check Version and Branch
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
                branch="$(Build.SourceBranch)"
                if [[ "$branch" != "refs/heads/master" && ! "$branch" =~ "refs/tags/.*" && "${{ parameters.ENV }}" == "prod" ]]; then
                   echo "Deploy branch $branch is not allowed."
                   exit 1
                fi
                if [[ "$version" == *SNAPSHOT && "${{ parameters.ENV }}" == "prod" ]]; then
                   echo "Version $version is not allowed."
                   exit 1
                fi
              failOnStderr: true

          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Cache Maven local repo

          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.11'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'
              sonarQubeRunAnalysis: false

          - task: Bash@3
            displayName: Get POM version
            name: getpomversion
            inputs:
              targetType: 'inline'
              script: |
                version=$(cat pom.xml | grep '^.*<version>' | sed -n 2p | awk -F'[><]' '{print $3}')
                echo "##vso[task.setvariable variable=outputpomversion;isOutput=true]$version"
              failOnStderr: true

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              containerRegistry: '$(dockerRegistryServiceConnection)'
              repository: '$(imageRepository)'
              command: 'buildAndPush'
              tags: |
                $(Build.BuildId)
                latest
                $(getpomversion.outputpomversion)


  # Deploy on K8s with Helm
  - stage: 'Serving_helm'
    displayName: 'Serving_Helm'
    dependsOn: Build
    condition: or(succeeded(), ne('${{ parameters.SEMVER }}', 'skip') )
    jobs:
      - job: Serving_helm
        displayName: Serving_helm
        steps:
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact manifests'
            condition: succeeded()
            inputs:
              targetPath: '$(Build.Repository.LocalPath)/helm'
              artifact: 'helm'
              publishLocation: 'pipeline'
  - stage: 'Deploy'
    displayName: 'Deploy_to_${{ parameters.ENV }}'
    dependsOn: "Serving_helm"
    condition: or(succeeded(), ne('${{ parameters.SEMVER }}', 'skip') )
    jobs:
      - deployment: 'Deploy_to_${{ parameters.ENV }}'
        displayName: 'Deploy_to_${{ parameters.ENV }}'
        environment: '${{ parameters.ENV }}'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: none
                - task: DownloadPipelineArtifact@2
                  inputs:
                    buildType: 'current'
                    artifactName: 'helm'
                    targetPath: '$(Pipeline.Workspace)/helm'
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(Pipeline.Workspace)/helm'
                    targetType: 'inline'
                    script: |
                      helm repo add pagopa-microservice https://pagopa.github.io/aks-microservice-chart-blueprint
                      helm dep build
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(nameSpace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(Pipeline.Workspace)/helm
                    chartName: $(imageRepository)
#                    releaseName: $(imageRepository)
                    valueFile: "$(Pipeline.Workspace)/helm/values-${{ parameters.ENV }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 5m0s"
  # Run test
  - stage: test
    # run this stage only if 'test' is enabled
    condition: and(not(failed('deployJava')), eq('${{ parameters.TEST }}', 'true'))
    jobs:
      # is needed to wait for startup of application
      - job: waitStartup
        pool: Server
        steps:
          - task: Delay@1
            inputs:
              delayForMinutes: '10'

#      - job: integrationTests
#        dependsOn: waitStartup
#        steps:
#          - script: |
#              git checkout $(SOURCE_BRANCH)
#              cd integration-test
#              yarn install
#              yarn test
#            displayName: 'integration test'
#
#          - task: PublishTestResults@2
#            condition: always()
#            inputs:
#              testResultsFormat: 'JUnit'
#              testResultsFiles: '**/*-TEST.xml'
#              searchFolder: '$(System.DefaultWorkingDirectory)'

#      - job: deployUAT
#        dependsOn: integrationTests
#        variables:
#          version: $[ stageDependencies.deploy.deployJava.outputs['dockerTag.version'] ]
#        steps:
#          - task: Maven@3
#            inputs:
#              mavenPomFile: 'pom.xml'
#              publishJUnitResults: false
#              javaHomeOption: 'JDKVersion'
#              jdkVersionOption: '1.11'
#              mavenVersionOption: 'Default'
#              mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
#              mavenAuthenticateFeed: false
#              effectivePomSkip: false
#              sonarQubeRunAnalysis: false
#
#          - task: Docker@2
#            displayName: Build and push an image to UAT container registry
#            inputs:
#              containerRegistry: '$(UAT_CONTAINER_REGISTRY)'
#              repository: '$(IMAGE_REPOSITORY)'
#              command: 'buildAndPush'
#              tags: |
#                $(Build.BuildId)
#                latest
#                $(version)
#
#          - task: AzureRMWebAppDeployment@4
#            displayName: Azure App Service Deploy in UAT
#            inputs:
#              appType: webAppContainer
#              ConnectedServiceName: '$(UAT_AZURE_SUBSCRIPTION)'
#              WebAppName: '$(UAT_WEB_APP_NAME)'
#              DockerNamespace: '$(UAT_CONTAINER_NAMESPACE)'
#              DockerRepository: '$(UAT_AZURE_SUBSCRIPTION)'
#              DockerImageTag: '$(Build.BuildId)'

